#!/bin/bash
#
# Copyright (c) 2021 by Thomas A. Early N7TAE
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

trap ControlC INT

ControlC () {
	echo "caught SIGINT"
}

declare -A cfgfile

SetStartRef() {
	local garbage
	IFS=';' read -r StartRef StartRefName garbage < <(grep ^$1 reflector_names.db)
	unset IFS
}

ReadFile() {
	local -n ar=$1
	while read line; do
		local key length section value name
		if [[ "${line:0:1}" == '#' ]]; then
			continue
		fi
		if [[ "${line:0:1}" == '[' ]]; then
			length=${#line}
			section=${line:1:${length}-2}
		else
			key=${line%%=*}
			value=${line#*=}
			name=${section},${key}
			ar[${name}]="$value"
		fi
	done < $2
}

Initialize() {
	ReadFile cfgfile dmr.cfg
	eval "${cfgfile[DMR Network,Options]}"
	if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
		SetStartRef $StartRef
	fi
}

EvalBool() {
	if [[ "${cfgfile[$1]}" == 0* ]]; then
		echo false
	else
		echo true
	fi
}

SetBool() {
	if [ -z "$value" ]; then
		if [[ ${cfgfile[$1]} == 0* ]]; then
			cfgfile[$1]=1
		else
			cfgfile[$1]=0
		fi
	else
		if [[ "$value" == [fF0]* ]]; then
			cfgfile[$1]=0
		else
			cfgfile[$1]=1
		fi
	fi
}

Header () {
	local count
	count=$( ps -aux | grep -e doh -e DMRGateway -e 0.0.0.0:80 | grep -v grep | wc -l )
	if ((${count} > 0)); then
		echo
		echo "USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND"
		ps -aux | grep -e doh -e DMRGateway -e 0.0.0.0:80 | grep -v grep
	fi
	echo
}

EndMenu () {
	echo
	echo    " u  <key> to unset the value of key (revert to the default value)."
	echo    " q  to return to the main menu"
	echo
	read -p " Please input: <key> <new_value> # omit value to toggle a true/false : " key value
}

ZeroStatic() {
	local i vn1 vn2
	for i in {1..9}; do
		vn1=TS1_$i
		vn2=TS2_$i
		eval $vn1=0
		eval $vn2=0
	done
}

EchoStatic() {
	local i=-1
	local -a static
	if [[ "$1" == one ]]; then
		if (( TS1_1 > 0 )); then
			static=( $TS1_1 $TS1_2 $TS1_3 $TS1_4 $TS1_5 $TS1_6 $TS1_7 $TS1_8 $TS1_9 0 )
			while (( static[++i] > 0 )); do
				echo -n " ${static[$i]}"
			done
		else
			echo -n " <EMPTY>"
		fi
	elif [[ "$1" == two ]]; then
		if (( TS2_1 > 0 )); then
			static=( $TS2_1 $TS2_2 $TS2_3 $TS2_4 $TS2_5 $TS2_6 $TS2_7 $TS2_8 $TS2_9 0 )
			while (( static[++i] > 0 )); do
				echo -n " ${static[$i]}"
			done
		else
			echo -n " <EMPTY>"
		fi
	fi
	echo
}

ProcessStatus() {
	if [[ `systemctl show -p LoadState --value doh` == 'loaded' ]]; then
		if [[ `systemctl show -p SubState  --value doh` == 'running' ]]; then
			DOHState='running'
		else
			DOHState='stopped'
		fi
	else
		DOHState='uninstalled'
	fi

	if [ -d ../DMRGateway ]; then
		if [[ `systemctl show -p LoadState --value DMRGateway` == 'loaded' ]]; then
			if [[ `systemctl show -p SubState  --value DMRGateway` == 'running' ]]; then
				GateState='running'
			else
				GateState='stopped'
			fi
		else
			GateState='uninstalled'
		fi
	else
		GateState='not found'
	fi

	if [[ `systemctl show -p LoadState --value qndash` == 'loaded' ]]; then
		if [[ `systemctl show -p SubState  --value qndash` == 'running' ]]; then
			DashState='running'
		else
			DashState='stopped'
		fi
	else
		DashState='uninstalled'
	fi
}

ProcessMenu() {
	local garbage
	ans=X
	while [[ "$ans" != q* ]]; do
		ProcessStatus
		clear
		Header
		echo "            Process Menu"
		echo
		if [[ "$DOHState" == un* ]]; then
			echo    " id : Install DOH"
		else
			echo    " rd : Restart DOH"
			if [[ "$DOHState" == run* ]]; then
				echo    " ud : Uninstall DOH"
			fi
			echo    " vd : View the DOH log"
		fi
		if [[ "$GateState" != not* ]]; then
			if [[ "$GateState" ==  un* ]]; then
				echo    " ig : Install Gateway"
			else
				echo    " rg : Restart Gateway"
				if [[ "$GateState" == run* ]]; then
					echo    " ug : Uninstall Gateway"
				fi
				echo    " vg : View the Gateway log"
			fi
		fi
		if [[ "$DashState" == un* ]]; then
			echo    " ID : Install Dashboard"
		else
			echo    " RD : Restart Dashboard"
			if [[ "$DashState" == run* ]]; then
				echo    " UD : Uninstall Dashboard"
			fi
		fi
		echo
		echo    " q  : Quit"
		read -p "      Input command: " ans

		if   [[ "$ans" == id* ]]; then sudo make install
		elif [[ "$ans" == rd* ]]; then sudo systemctl restart doh
		elif [[ "$ans" == ud* ]]; then sudo make uninstall
		elif [[ "$ans" == vd* ]]; then sudo journalctl -u doh -f
		elif [[ "$ans" == ig* ]]; then
			pushd ../DMRGateway
			make -j`getconf _PROCESSORS_ONLN`
			popd
			sudo make installgateway
		elif [[ "$ans" == rg* ]]; then sudo systemctl restart dmrgateway
		elif [[ "$ans" == ug* ]]; then sudo make uninstallgateway
		elif [[ "$ans" == vg* ]]; then sudo journalctl -u dmrgateway -f
		elif [[ "$ans" == ID* ]]; then sudo make installdash
		elif [[ "$ans" == RD* ]]; then sudo systemctl qndash restart
		elif [[ "$ans" == UD* ]]; then sudo make uninstalldash
		fi
	done
}

CodeMenu() {
	local n=$(getconf _NPROCESSORS_ONLN)
	local garbage
	ans=X
	while [[ "$ans" != q* ]]; do
		clear
		echo
		echo    "      Code Menu"
		echo    "      Detected $n processors for make"
		echo -n "      Current Branch: "; git rev-parse --abbrev-ref HEAD
		echo
		echo    " br : Switch Branch"
		echo    " gp : Git pull - pull any changes from the repo"
		echo    " co : Compile"
		echo    " cl : Clean build (remove executible and intermediate files)"
		if [[ "${cfgfile[DMR Network,Type]}" == Gateway ]]; then
			if [[ -d ../DMRGateway ]]; then
				echo " pg : Git pull ../DMRGateway"
				echo " cg : Compile  ../DMRGateway"
				echo " lg : Clean    ../DMRGateway"
			else
				echo "WARNING! DOH is configured to use DMRGateway, but source can not be found at ../DMRGateway!"
			fi
		fi
		echo
		echo    " q  : Quit"
		read -p "      Input command and optional argument: " ans value

		if   [[ "$ans" == br* ]]; then
			clear
			echo
			echo "Current Branches ('*' == current branch):"
			git branch --list
			echo
			read -p "Input desired branch name, or nothing to not make a selection: " value
			if [[ -n "$value" ]]; then
				if (( `git branch --list | grep "$value" | wc -l` == 1 )); then
					git checkout "$value";
				else
					echo "'$value' is not a valid branch name."
					read -p "<Enter> to continue: " garbage
				fi
			fi
		elif [[ "$ans" == gp* ]]; then
			git pull
			read -p "<Enter> to continue: " garbage
		elif [[ "$ans" == co* ]]; then
			make -j$n
			read -p "<Enter> to continue: " garbage
		elif [[ "$ans" == cl* ]]; then
			make clean
		elif [[ "$ans" == pg* ]]; then
			pushd ../DMRGateway
			git pull
			echo
			echo "Be sure the DMRGateway.cfg file is set up to your needs"
			echo "before installing or reinstalling DMRGateway!"
			echo
			read -p "<Enter> to continue: " garbage
			popd
		elif [[ "$ans" == cg* ]]; then
			pushd ../DMRGateway
			make -j$n
			echo
			read -p "<Enter> to continue: " garbage
			popd
		elif [[ "$ans" == lg* ]]; then
			pushd ../DMRGateway
			make clean
		fi
	done
}

ZeroStatic

ReadFile inifile dmr.ini

if [ ! -e dmr.cfg ]; then
	echo "No configure file found!"
	exit 1
fi

Initialize

while [[ "$ans" != q* ]]
do
	txfreq=$( awk "BEGIN{print ${cfgfile[Info,TXFrequency]}/1000000}" )
	rxfreq=$( awk "BEGIN{print ${cfgfile[Info,RXFrequency]}/1000000}" )
	dup=( `EvalBool 'General,Duplex'` )
	clear
	Header
	echo
	echo "     DOH Adminstration V#220301"
	echo
	echo "     ID      ${cfgfile[General,Callsign]} - ${cfgfile[General,Id]}"
	echo "     TX(RX)  ${txfreq}(${rxfreq}) MHz"
	echo "     Duplex  ${dup[0]}"
	echo "     Network ${cfgfile[DMR Network,Name]}"
	if [ -e ${cfgfile[Modem,Port]} ]; then
		echo "     Modem @ ${cfgfile[Modem,Port]}"
	else
		echo "     WARNING: Modem at '${cfgfile[Modem,Port]}' not found. Is it unplugged?"
	fi
	if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
		echo
		echo "     DMR+ Options:"
		echo "         Start Reflector:      $StartRef - $StartRefName"
		echo "         Relink Time (min):    $RelinkTime"
		echo -n "         User can Relink:      "
		if (( 1 == UserLink )); then echo true; else echo false; fi
		if (( 4000 == StartRef )); then
			echo -n "         Slot 1 Static groups:"; EchoStatic one
			echo -n "         Slot 2 Static groups:"; EchoStatic two
		fi
	fi
	echo
	echo " c : Configuration Menu (./config)"
	echo " s : Source code (compiling) Menu"
	if [ -e doh ]; then
		echo " p : Process Menu"
	fi
	echo
	echo " q : Quit"
	echo
	read -p "Command: " ans
	if   [[ "$ans" == c* ]]; then
		if [ -f dmr.cfg ]; then
			before=$(stat --printf=%Y dmr.cfg)
		else
			before=0
		fi
		./config
		after=$(stat --printf=%Y dmr.cfg)
		if (( $after > $before )); then
			ProcessStatus
			if [[ "$DOHState" != not* ]]; then
				clear
				echo
				echo "dmr.cfg has been modified. Would you like to restart DOH?"
				echo
				read -p "Y/y to restart DOH: " restart
				if [[ "$restart" == [yY]* ]]; then
					sudo systemctl restart doh
					Initialize
				fi
			fi
		fi
	elif [[ "$ans" == s* ]]; then CodeMenu; ans=X
	elif [[ "$ans" == p* ]] && [ -e doh ]; then ProcessMenu; ans=X
	fi
done
