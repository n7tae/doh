#!/bin/bash
#
# Copyright (c) 2021 by Thomas A. Early N7TAE
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

declare -A inifile cfgfile

SetStartRef() {
	local garbage
	IFS=';' read -r StartRef StartRefName garbage < <(grep ^$1 reflector_names.db)
	unset IFS
}

ReadFile() {
	local -n ar=$1
	while read line; do
		local key length section value name
		if [[ "${line:0:1}" == '#' ]]; then
			continue
		fi
		if [[ "${line:0:1}" == '[' ]]; then
			length=${#line}
			section=${line:1:${length}-2}
		else
			key=${line%%=*}
			value=${line#*=}
			name=${section},${key}
			ar[${name}]="$value"
		fi
	done < $2
}

EvalVar() {
	if [[ "${inifile[$1]}" == "${cfgfile[$1]}" ]]; then
		echo "${cfgfile[$1]} <DEFAULT>"
	else
		echo "${cfgfile[$1]}"
	fi
}

EvalBool() {
	if [[ "${cfgfile[$1]}" == 0* ]]; then
		echo -n false
	else
		echo -n true
	fi
	if [[ "${inifile[$1]}" == "${cfgfile[$1]}" ]]; then
		echo " <DEFAULT>"
	else
		echo
	fi
}

ResetValue() {
	cfgfile[$1]=${inifile[$1]}
}

SetBool() {
	if [ -z "$value" ]; then
		if [[ ${cfgfile[$1]} == 0* ]]; then
			cfgfile[$1]=1
		else
			cfgfile[$1]=0
		fi
	else
		if [[ "$value" == [fF0]* ]]; then
			cfgfile[$1]=0
		else
			cfgfile[$1]=1
		fi
	fi
}

EndMenu () {
	echo
	echo    " u  <key> to unset the value of key (revert to the default value)."
	echo    " q  to return to the main menu"
	echo
	read -p " Please input: <key> <new_value> # omit value to toggle a true/false : " key value
}

GeneralMenu() {
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo "    General Parameters"
		echo
		echo -n " c : Callsign      = "; EvalVar 'General,Callsign'
		echo -n " i : DMR ID        = "; EvalVar 'General,Id'
		echo -n " t : Timeout (sec) = "; EvalVar 'General,Timeout'
		echo -n " d : Is Duplex     = "; EvalBool 'General,Duplex'
		EndMenu
		if   [[ "$key" == c* ]]; then
			if [[ "${value^^}" =~ ^[0-9]?[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,4}$ ]]; then
				cfgfile[General,Callsign]=${value^^}
			else
				echo "$value does not appear to be a valid callsign"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == i* ]]; then
			if [[ "$value" =~ ^[1-9][0-9]*$ ]]; then
				cfgfile[General,Id]=$value
			else
				echo "$value does not appear to be a valid DMR ID"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == t* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[General,Timeout]=$value
			else
				echo "$value does not appear to be a valid timeout"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == d* ]]; then SetBool 'General,Duplex' "$value"
		elif [[ "$key" == u* ]]; then
			if   [[ "$value" == c* ]]; then ResetValue 'General,Callsign'
			elif [[ "$value" == i* ]]; then ResetValue 'General,Id'
			elif [[ "$value" == t* ]]; then ResetValue 'General,Timeout'
			elif [[ "$value" == d* ]]; then ResetValue 'General,Duplex'
			fi
		fi
	done
}

StationMenu() {
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo "    Station Parameters"
		echo
		echo -n " tx : TX Frequency (Hz)   = "; EvalVar 'Info,TXFrequency'
		echo -n " rx : RX Frequency (Hz)   = "; EvalVar 'Info,RXFrequency'
		echo -n " pw : Power(Watts)        = "; EvalVar 'Info,Power'
		echo -n " la : Latitude (degrees)  = "; EvalVar 'Info,Latitude'
		echo -n " lo : Longitude (degrees) = "; EvalVar 'Info,Longitude'
		echo -n " hi : Height (meters)     = "; EvalVar 'Info,Height'
		echo -n " pl : Location            = "; EvalVar 'Info,Location'
		echo -n " de : Description         = "; EvalVar 'Info,Description'
		echo -n " ad : URL address         = "; EvalVar 'Info,URL'
		EndMenu
		if   [[ "$key" == tx* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Info,TXFrequency]=$value
			else
				echo "'$value' is not a proper TX frequency"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == rx* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Info,RXFrequency]=$value
			else
				echo "'$value' is not a proper RX frequency"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == pw* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Info,Power]=$value
			else
				echo "'$value' is not a proper Power"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == la* ]]; then
			if [[ "$value" =~ ^[-0-9\.]+$ ]]; then
				cfgfile[Info,Latitude]=$value
			else
				echo "'$value' is not a proper Latitude"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == lo* ]]; then
			if [[ "$value" =~ ^[-0-9\.]+$ ]]; then
				cfgfile[Info,Longitude]=$value
			else
				echo "'$value' is not a proper Longitude"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == hi* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Info,Height]=$value
			else
				echo "'$value' is not a proper Height"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == pl* ]]; then
			if [[ "$value" =~ ^[/,0-9a-zA-Z\.\ \-]+$ ]]; then
				cfgfile[Info,Location]=$value
			else
				echo "'$value' is not a proper Location"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == de* ]]; then
			if [[ "$value" =~ ^[/,0-9a-zA-Z:\.\ \-]+$ ]]; then
				cfgfile[Info,Description]=$value
			else
				echo "'$value' is not a proper Description"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ad* ]]; then
			if [[ "$value" =~ ^[-/0-9a-zA-Z\.%]+$ ]]; then
				cfgfile[Info,URL]=$value
			else
				echo "'$value' is not a proper URL"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == u* ]]; then
			if   [[ "$value" == tx* ]]; then ResetValue 'Info,TXFrequency'
			elif [[ "$value" == rx* ]]; then ResetValue 'Info,RXFrequency'
			elif [[ "$value" == pw* ]]; then ResetValue 'Info,Power'
			elif [[ "$value" == la* ]]; then ResetValue 'Info,Latitude'
			elif [[ "$value" == lo* ]]; then ResetValue 'Info,Longitude'
			elif [[ "$value" == hi* ]]; then ResetValue 'Info,Height'
			elif [[ "$value" == pl* ]]; then ResetValue 'Info,Location'
			elif [[ "$value" == de* ]]; then ResetValue 'Info,Description'
			elif [[ "$value" == ad* ]]; then ResetValue 'Info,URL'
			fi
		fi
	done
}

ModemMenu() {
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo "    Modem Parameters"
		if [ ! -e "${cfgfile[Modem,Port]}" ]; then
			echo "    WARNING: Modem @ '${cfgfile[Modem,Port]}' not found. Is it unplugged?"
		fi
		echo
		echo -n " po : Port Device               = "; EvalVar 'Modem,Port'
		echo -n " pr : Protocol (i2c or uart)    = "; EvalVar 'Modem,Protocol'
		if [[ "${cfgfile[Modem,Protocol]}" == i2c ]]; then
			echo -n " ad : Address                   = "; EvalVar 'Modem,Address'
		fi
		echo -n " ti : TX Invert                 = "; EvalBool 'Modem,TXInvert'
		echo -n " ri : RX Invert                 = "; EvalBool 'Modem,RXInvert'
		echo -n " pi : PTT Invert                = "; EvalBool 'Modem,PTTInvert'
		echo -n " td : TX Delay (msec)           = "; EvalVar  'Modem,TXDelay'
		echo -n " dd : DMR Delay (msec)          = "; EvalVar  'Modem,DMRDelay'
		echo -n " to : TX Offset (Hz)            = "; EvalVar  'Modem,TXOffset'
		echo -n " ro : RX Offset (Hz)            = "; EvalVar  'Modem,RXOffset'
		echo -n " tl : TX Level (0.0 - 100.0)    = "; EvalVar  'Modem,TXLevel'
		echo -n " rl : RX Level (0.0 - 100.0)    = "; EvalVar  'Modem,RXLevel'
		echo -n " rf : RF Level (0.0 - 100.0)    = "; EvalVar  'Modem,RFLevel'
		echo -n " tc : TX DC Offset (-128 - 127) = "; EvalVar  'Modem,TXDCOffset'
		echo -n " rc : RX DC Offset (-128 - 127) = "; EvalVar  'Modem,RXDCOffset'
		echo -n " rs : RSSI File Path            = "; EvalVar  'Modem,RSSIMappingFile'
		echo -n " co : Use COS as Lockout        = "; EvalBool 'Modem,UseCOSAsLockout'
		echo -n " tr : Trace                     = "; EvalBool 'Modem,Trace'
		echo -n " db : Debug                     = "; EvalBool 'Modem,Debug'
		EndMenu
		if   [[ "$key" == po* ]]; then
			if [[ "$value" =~ ^/dev/[0-9a-zA-Z]+$ ]]; then
				cfgfile[Modem,Port]=$value
			else
				echo "'$value' is not a proper device path"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == pr* ]]; then
			if [[ "$value" =~ ^(uart|i2c)$ ]]; then
				cfgfile[Modem,Protocol]=$value
			else
				echo "'$value' is not a proper protocol"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ad* ]]; then
			if [[ "$value" =~ ^0x[0-9a-fA-F]+$ ]]; then
				cfgfile[Modem,Address]=$value
			else
				echo "'$value' is not a proper Address"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ti* ]]; then SetBool 'Modem,TXInvert' "$value"
		elif [[ "$key" == ri* ]]; then SetBool 'Modem,RXInvert' "$value"
		elif [[ "$key" == pi* ]]; then SetBool 'Modem,PTTInvert' "$value"
		elif [[ "$key" == td* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Modem,TXDelay]=$value
			else
				echo "'$value' is not a proper TX Delay"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == dd* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[Modem,DMRDelay]=$value
			else
				echo "'$value' is not a proper DMR Delay"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == to* ]]; then
			if [[ "$value" =~ ^-?[1-9][0-9]*$ ]]; then
				cfgfile[Modem,TXOffset]=$value
			else
				echo "'$value' is not a proper TX Offset"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ro* ]]; then
			if [[ "$value" =~ ^-?[1-9][0-9]*$ ]]; then
				cfgfile[Modem,RXOffset]=$value
			else
				echo "'$value' is not a proper RX Offset"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == tl* ]]; then
			if [[ "$value" =~ ^(([0-9]|[1-9][0-9])(\.[0-9]*)?|100(\.0*)?)$ ]]; then
				cfgfile[Modem,TXLevel]=$value
			else
				echo "'$value' is not a proper TX Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == rl* ]]; then
			if [[ "$value" =~ ^(([0-9]|[1-9][0-9])(\.[0-9]*)?|100(\.0*)?)$ ]]; then
				cfgfile[Modem,RXLevel]=$value
			else
				echo "'$value' is not a proper RX Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == rf* ]]; then
			if [[ "$value" =~ ^(([0-9]|[1-9][0-9])(\.[0-9]*)?|100(\.0*)?)$ ]]; then
				cfgfile[Modem,RFLevel]=$value
			else
				echo "'$value' is not a proper RF Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == tc* ]]; then
			if [[ "$value" =~ ^-?(12[0-7]|10[0-9]|[1-9][0-9]?)$ ]]; then
				cfgfile[Modem,TXDCOffset]=$value
			else
				echo "'$value' is not a proper TX DC Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == rc* ]]; then
			if [[ "$value" =~ ^-?(12[0-7]|10[0-9]|[1-9][0-9]?)$ ]]; then
				cfgfile[Modem,RXDCOffset]=$value
			else
				echo "'$value' is not a proper RX DC Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == rs* ]]; then
			if [[ -n "$value" ]]; then
				if [[ -e "$value" ]]; then
					cfgfile[Modem,RSSIMappingFile]="$value"
				else
					echo "RSSI file '$value'does not exist!"
					read -p "<Enter> to continue: " garbage
				fi
			else
				cfgfile[Modem,RSSIMappingFile]=''
			fi
		elif [[ "$key" == co* ]]; then SetBool 'Modem,UseCOSAsLockout' "$value"
		elif [[ "$key" == tr* ]]; then SetBool 'Modem,Trace' "$value"
		elif [[ "$key" == db* ]]; then SetBool 'Modem,Debug' "$value"
		elif [[ "$key" == u* ]]; then
			if   [[ "$value" == po* ]]; then ResetValue 'Modem,Port'
			elif [[ "$value" == pr* ]]; then ResetValue 'Modem,Protocol'
			elif [[ "$value" == ad* ]]; then ResetValue 'Modem,Address'
			elif [[ "$value" == ti* ]]; then ResetValue 'Modem,TXInvert'
			elif [[ "$value" == ri* ]]; then ResetValue 'Modem,RXInvert'
			elif [[ "$value" == pi* ]]; then ResetValue 'Modem,PTTInvert'
			elif [[ "$value" == td* ]]; then ResetValue 'Modem,TXDelay'
			elif [[ "$value" == dd* ]]; then ResetValue 'Modem,DMRDelay'
			elif [[ "$value" == to* ]]; then ResetValue 'Modem,TXOffset'
			elif [[ "$value" == ro* ]]; then ResetValue 'Modem,RXOffset'
			elif [[ "$value" == tl* ]]; then ResetValue 'Modem,TXLevel'
			elif [[ "$value" == rl* ]]; then ResetValue 'Modem,RXLevel'
			elif [[ "$value" == rf* ]]; then ResetValue 'Modem,RFLevel'
			elif [[ "$value" == tc* ]]; then ResetValue 'Modem,TXDCOffset'
			elif [[ "$value" == rc* ]]; then ResetValue 'Modem,RXDCOffset'
			elif [[ "$value" == rs* ]]; then ResetValue 'Modem,RSSIMappingFile'
			elif [[ "$value" == co* ]]; then ResetValue 'Modem,UseCOSAsLockout'
			elif [[ "$value" == tr* ]]; then ResetValue 'Modem,Trace'
			elif [[ "$value" == db* ]]; then ResetValue 'Modem,Debug'
			fi
		fi
	done
}

SelectXLXReflector() {
	local i dpar limit

	wget -q -N https://pistar.uk/downloads/DMR_Hosts.txt
	/bin/rm -f DMR_Hosts.txt.*
	# make sure 307 and 587 are there
	grep -q XLX_307 DMR_Hosts.txt || echo "XLX_307 0000 72.21.76.154 passw0rd 62030" >> DMR_Hosts.txt
	grep -q XLX_587 DMR_Hosts.txt || echo "XLX_587 0000 104.8.207.66 passw0rd 62030" >> DMR_Hosts.txt
	DPServers=( `grep ^XLX_ DMR_Hosts.txt | awk '{print substr($1, 5)}' | sort` )
	i=-1
	clear
	echo
	echo "                      XLX Reflectors"
	limit=${#DPServers[@]}
	while (( ++i < limit )); do
		if ((0 == i % 18)); then echo; fi
		printf " %-3.3s" ${DPServers[$i]}
	done
	echo
	read -p "Type the XLX Reflector 3-character designator: " ans
	if [[ "${ans^^}" =~ [0-9A-Z][0-9A-Z][0-9A-Z] ]]; then
		dpar=( `awk '{if($1=="XLX_'${ans^^}'")print $0}' DMR_Hosts.txt` )
		if (( 5 == ${#dpar[@]} )); then
			cfgfile[DMR Network,Name]=XLX${ans^^}
			cfgfile[DMR Network,Address]=${dpar[2]}
			cfgfile[DMR Network,Password]=${dpar[3]}
			cfgfile[DMR Network,Port]=${dpar[4]}
			echo
			echo "Found XLX_${ans^^} in DMR_Hosts.txt!"
			echo
			echo "To link to a module, key up TG 40XX, where XX is a number between 01 and 26,"
			echo "for module A to module Z, then use TG 9 to talk."
			echo
			read -p "<Enter> to continue: " garbage
		else
			echo "Cannot find 'XLX_${ans^^}' in DMR_Hosts.txt"
			read -p "<Enter> to continue: " garbage
		fi
	else
		echo "You must respond with three charaters, letters or digits."
		read -p "<Enter to continue: " garbage
	fi
}

SelectDMRServer() {
	local i title dpar limit

	wget -q -N https://pistar.uk/downloads/DMR_Hosts.txt
	/bin/rm -f DMR_Hosts.txt.*

	if   [[ "$1" == D* ]]; then
		DPServers=( `grep ^DMR+_IPSC2- DMR_Hosts.txt | awk '{print substr($1, 12)}'` )
		title='DMR+'
	elif [[ "$1" == B* ]]; then
		DPServers=( `grep ^BM_         DMR_Hosts.txt | awk '{print substr($1, 4)}'` )
		title='BrandMeister'
	elif [[ "$1" == F* ]]; then
		DPServers=( `grep ^FreeDMR_    DMR_Hosts.txt | awk '{print substr($1, 9)}'` )
		title='FreeDMR'
	elif [[ "$1" == H* ]]; then
		DPServers=( `grep ^HB_         DMR_Hosts.txt | awk '{print substr($1, 4)}'` )
		title='HBLink'
	elif [[ "$1" == T* ]]; then
		DPServers=( `grep ^TGIF_       DMR_Hosts.txt | awk '{print substr($1, 6)}'` )
		title='TGIF'
	else
		return
	fi
	i=-1
	clear
	echo
	echo "       $title Servers"
	limit=${#DPServers[@]}
	while (( ++i < limit )); do
		if ((0 == i % 4)); then echo; fi
		printf " %3d - %-20.20s" $i ${DPServers[$i]}
	done
	echo
	read -p "Select Server # (or 'q' to quit without selecting a server): " n garbage
	if [[ "$n" =~ [0-9]* ]]; then
		if (( n >= 0 && n < limit )); then
			dpar=( `awk '{if($1=="'${1}${DPServers[$n]}'")print $0}' DMR_Hosts.txt` )
			if [ "${#dpar[@]}" -eq 5 ]; then
				cfgfile[DMR Network,Name]=${dpar[0]}
				cfgfile[DMR Network,Address]=${dpar[2]}
				cfgfile[DMR Network,Password]=${dpar[3]}
				cfgfile[DMR Network,Port]=${dpar[4]}
				if [[ "$1" == DMR+_IPSC2* ]]; then
					SetStartRef 4000
					RelinkTime=15
					UserLink=1
					ZeroStatic
				fi
			else
				echo "Cannot find '${1}${DPServers[$n]}' in DMR_Hosts.txt"
				read -p "<Enter> to continue: " garbage
			fi
		else
			echo "'$n' is not a valid response"
			read -p "<Enter> to continue: " garbage
		fi
	fi
}

ZeroStatic() {
	local i vn1 vn2
	for i in {1..9}; do
		vn1=TS1_$i
		vn2=TS2_$i
		eval $vn1=0
		eval $vn2=0
	done
}

EchoStatic() {
	local i=-1
	local -a static
	if [[ "$1" == one ]]; then
		if (( TS1_1 > 0 )); then
			static=( $TS1_1 $TS1_2 $TS1_3 $TS1_4 $TS1_5 $TS1_6 $TS1_7 $TS1_8 $TS1_9 0 )
			while (( static[++i] > 0 )); do
				echo -n " ${static[$i]}"
			done
		else
			echo -n " <EMPTY>"
		fi
	elif [[ "$1" == two ]]; then
		if (( TS2_1 > 0 )); then
			static=( $TS2_1 $TS2_2 $TS2_3 $TS2_4 $TS2_5 $TS2_6 $TS2_7 $TS2_8 $TS2_9 0 )
			while (( static[++i] > 0 )); do
				echo -n " ${static[$i]}"
			done
		else
			echo -n " <EMPTY>"
		fi
	fi
	echo
}

SelectDMRPlusReflector() {
	local i tg name language garbage l slang ego
	local -A lang

	wget -q -N http://ipsc2-lists.xreflector.net/Database/dmr/reflector_names.db
	/bin/rm -f reflector_names.db.*

	while IFS=';' read -r tg name language garbage; do
		if [[ -z "$language" ]]; then language=unspecified; fi
		if [[ -z "${lang[$language]}" ]]; then lang[$language]=0; fi
		lang[$language]=$(expr ${lang[$language]} + 1)
	done < <(grep ^4 reflector_names.db)
	IFS=$'\n' slang=( $(sort <<<"${!lang[*]}") )
	unset IFS

	clear
	echo
	echo "      Available reflector languages"
	echo
	i=0
	for l in "${slang[@]}"; do
		printf "%3d : %s\n" $i "$l"
		((++i))
	done
	echo
	echo    "      Choose a language."
	read -p "      <Enter> to see all reflectors: " ans garbage
	ego='^4'
	if [[ "$ans" =~ [0-9]+ ]]; then
		if (( $ans < ${#slang[@]} )); then
			if [[ "${slang[$ans]}" == unspecified ]]; then
				ego='^4.*;;;;$'
			else
				ego='^4.*'${slang[$ans]}
			fi
		fi
	fi

	clear
	i=-1
	echo
	echo "       DMR+ Reflectors"
	while IFS=';' read -r tg name language garbage; do
		if (( 0 == ++i % 4 )); then echo; fi
		printf " %3d : %-20.20s" $tg "$name"
	done < <(grep $ego reflector_names.db)
	echo
	read -p "Select Server # (or 'q' to quit without selecting a server): " n garbage
	if [[ "$n" != q* ]]; then
		if [[ "$n" =~ 4[0-9][0-9][0-9] ]]; then
			if ((1 == $(grep $ego reflector_names.db | grep ^$n | wc -l) )); then
				SetStartRef $n
				ZeroStatic
			else
				echo "'$n' is not a reflector in the list."
				read -p "<Enter> to continue: " garbage
			fi
		else
			echo "'$n' is not a valid reflector number."
			read -p "<Enter> to continue: " garbage
		fi
	fi
}

SetDMRPlusOptions() {
	local i tg
	local mode
	if (( $StartRef == 4000 )); then
		mode=static
	else
		mode=reflector
	fi
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo        "      Configure Options for ${cfgfile[DMR Network,Name]}"
		echo
		if [[ "$mode" == static ]]; then
			echo    "      Static Mode"
			echo    " rm : Switch to Reflector Mode"
			echo    "      Up to nine TGs can be set for each slot."
			echo    "      Separate each TG with a space."
			echo -n " s1 : Slot One static groups ="; EchoStatic one
			echo -n " s2 : Slot Two static groups ="; EchoStatic two
		else
			echo    "      Reflector Mode"
			echo    " sm : Swtich to Static Mode"
			echo    " sr : Select Reflector       = $StartRef - $StartRefName"
		fi
		echo
		echo        " rt : Relink Time (minutes)  = $RelinkTime"
		echo -n     " ul : User can change link   = "
		if [[ "$UserLink" = 0 ]]; then
			echo FALSE
		else
			echo TRUE
		fi
		echo
		echo        " q  : Quit and return"
		read -p "Input key and optional value: " key value

		if   [[ "$key" == rm* ]]; then
			ZeroStatic
			mode=reflector
		elif [[ "$key" == s1* ]]; then
			i=1
			for tg in $value; do
				if [[ "$tg" =~ [1-9][0-9]?[0-9]? ]]; then
					eval TS1_$i=$tg
					((++i))
				fi
			done
			while ((i < 10)); do
				eval TS1_$i=0
				((++i))
			done
		elif [[ "$key" == s2* ]]; then
			i=1
			for tg in $value; do
				if [[ "$tg" =~ [1-9][0-9]?[0-9]? ]]; then
					eval TS2_$i=$tg
					((++i))
				fi
			done
			while ((i < 10)); do
				eval TS2_$i=0
				((++i))
			done
		elif [[ "$key" == sm* ]]; then
			SetStartRef 4000
			mode=static
		elif [[ "$key" == sr* ]]; then
			SelectDMRPlusReflector
		elif [[ "$key" == rt* ]]; then
			if [[ "$value" =~ [1-9][0-9]* ]]; then
				RelinkTime=$value
			else
				echo "'$value' is not a valid relink time."
				read -p "<Return> to continue: " garbage
			fi
		elif [[ "$key" == ul* ]]; then
			if [ -z "$value" ]; then
				if [[ $UserLink == 0 ]]; then
					UserLink=1
				else
					UserLink=0
				fi
			else
				if [[ "$value" == [1tT]* ]]; then
					UserLink=1
				else
					UserLink=0
				fi
			fi
		fi
	done
}

NetworkMenu() {
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo    "      DMR Network Configuration"
		if [[ "${cfgfile[DMR Network,Type]}" == Direct ]]; then
			echo "      Using a Direct connection to ${cfgfile[DMR Network,Name]}"
		else
			echo "      Using DMRGateway"
		fi
		echo
		echo    "      ######### DMR Configuration #########"
		echo -n " be : Beacons Enabled            = "; EvalBool 'DMR,Beacons'
		if [[ "${cfgfile[DMR,Beacons]}" == 1* ]]; then
			echo -n " bi : Beacon Interval (min)      = "; EvalVar  'DMR,BeaconInterval'
			echo -n " bd : Beacon Duration (sec)      = "; EvalVar  'DMR,BeaconDuration'
		fi
		echo -n " cc : Color Code (0-15)          = "; EvalVar  'DMR,ColorCode'
		echo -n " so : Self Only                  = "; EvalBool 'DMR,SelfOnly'
		echo -n " lc : Embedded LC Only           = "; EvalBool 'DMR,EmbeddedLCOnly'
		echo -n " ta : Dump TA Data               = "; EvalBool 'DMR,DumpTAData'
		echo -n " ch : Call Hang (sec)            = "; EvalVar  'DMR,CallHang'
		echo -n " th : TX Hang (sec)              = "; EvalVar  'DMR,TXHang'
		echo
		echo    "      #########    DMR Network    #########"
		echo    "      Network type: ${cfgfile[DMR Network,Type]}"
		echo -n " ty : Switch network type to "
		if [[ "${cfgfile[DMR Network,Type]}" == Direct ]]; then
			echo Gateway
			echo
			echo    "      Choose a DMR Network from the following..."
			echo    " XL : Select a XLX Reflector"
			echo    " D+ : Select a DMR+ IPSC2 Server"
			echo    " BM : Select a Brandmeister Server"
			echo    " FD : Select a Free DMR Server"
			echo    " HB : Select a HB Link Server"
			echo    " TG : Select the TGIF Network"
		else
			echo Direct
		fi
		echo
		echo -n " s1 : Enable Slot 1              = "; EvalBool 'DMR Network,Slot1'
		echo -n " s2 : Enable Slot 2              = "; EvalBool 'DMR Network,Slot2'
		echo -n " ip : IP Address                 = "; EvalVar  'DMR Network,Address'
		echo -n " pw : Password                   = "; EvalVar  'DMR Network,Password'
		echo -n " po : Port                       = "; EvalVar  'DMR Network,Port'
		if [[ "${cfgfile[DMR Network,Type]}" == Gateway ]]; then
			echo -n " lo : Local Port                 = "; EvalVar  'DMR Network,Local'
		fi
		echo -n " ji : Jitter                     = "; EvalVar  'DMR Network,Jitter'
		echo -n " db : Debug                      = "; EvalBool 'DMR Network,Debug'
		EndMenu
		if   [[ "$key" == D+* ]]; then SelectDMRServer 'DMR+_IPSC2-'
		elif [[ "$key" == XL* ]]; then SelectXLXReflector
		elif [[ "$key" == BM* ]]; then SelectDMRServer 'BM_'
		elif [[ "$key" == FD* ]]; then SelectDMRServer 'FreeDMR_'
		elif [[ "$key" == HB* ]]; then SelectDMRServer 'HB_'
		elif [[ "$key" == TG* ]]; then SelectDMRServer 'TGIF_'
		elif [[ "$key" == be* ]]; then SetBool 'DMR,Beacons'        "$value"
		elif [[ "$key" == so* ]]; then SetBool 'DMR,SelfOnly'       "$value"
		elif [[ "$key" == lc* ]]; then SetBool 'DMR,EmbeddedLCOnly' "$value"
		elif [[ "$key" == ta* ]]; then SetBool 'DMR,DumpTAData'     "$value"
		elif [[ "$key" == bi* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[DMR,BeaconInterval]=$value
			else
				echo "'$value' is not a valid Beacon Interval"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == bd* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[DMR,BeaconDuration]=$value
			else
				echo "'$value' is not a valid Beacon Duration"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == cc* ]]; then
			if [[ "$value" =~ ^[0-9]|1[0-5]$ ]]; then
				cfgfile[DMR,ColorCode]=$value
			else
				echo "'$value' is not a valid Color Code"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ch* ]]; then
			if [[ "$value" =~ ^([0-9]|[1-3][0-9])$ ]]; then
				cfgfile[DMR,CallHang]=$value
			else
				echo "'$value' is not a valid Call Hang"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == th* ]]; then
			if [[ "$value" =~ ^([0-9]|[1-3][0-9])$ ]]; then
				cfgfile[DMR,TXHang]=$value
			else
				echo "'$value' is not a valid TX Hang"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ty* ]]; then
			if [[ "${cfgfile[DMR Network,Type]}" == Direct ]]; then
				cfgfile[DMR Network,Type]=Gateway
				cfgfile[DMR Network,Name]='DMRGateway'
				cfgfile[DMR Network,Address]='127.0.0.1'
				cfgfile[DMR Network,Password]=''
				cfgfile[DMR Network,Port]=62031
				cfgfile[DMR Network,Local]=62032
			else
				cfgfile[DMR Network,Type]=Direct
				cfgfile[DMR Network,Name]='DMR+_IPSC2-QUADNET'
				cfgfile[DMR Network,Address]='dmr.openquad.net'
				cfgfile[DMR Network,Password]=PASSWORD
				cfgfile[DMR Network,Port]=55555
				cfgfile[DMR Network,Local]=0
				SetStartRef 4000
				RelinkTime=15
				UserLink=1
				TS1_1=0;TS1_2=0;TS1_3=0;TS1_4=0;TS1_5=0;TS1_6=0;TS1_7=0;TS1_8=0;TS1_9=0
				TS2_1=0;TS2_2=0;TS2_3=0;TS2_4=0;TS2_5=0;TS2_6=0;TS2_7=0;TS2_8=0;TS2_9=0
			fi
		elif [[ "$key" == ad* ]]; then
			if [[ "$value" =~ ^[0-9a-zA-z]\.[0-9a-zA-Z]+$ ]]; then
				cfgfile[DMR Network,Address]=$value
			else
				echo "'$value' is not a valid IP Address"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == pw* ]]; then
			if [[ "$value" =~ ^[0-9a-zA-Z!\.]*$ ]]; then
				cfgfile[DMR Network,Password]=$value
			else
				echo "'$value' is not a valid Password"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == po* ]]; then
			if [[ "$value" =~ ^[1-9][0-9]*$ ]]; then
				cfgfile[DMR Network,Port]=$value
			else
				echo "'$value' is not a valid Port"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == lo* ]]; then
			if [[ "$value" =~ ^[1-9][0-9]*$ ]]; then
				cfgfile[DMR Network,Local]=$value
			else
				echo "'$value' is not a valid Local Port"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == s1* ]]; then SetBool 'DMR Network,Slot1' "$value"
		elif [[ "$key" == s2* ]]; then SetBool 'DMR Network,Slot2' "$value"
		elif [[ "$key" == ip* ]]; then
			if [[ "$value" =~ ^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]){1,1}$ ]]; then
				cfgfile[DMR Network,Address]=$value
			else
				echo "'$value' must be a dotted number IP Address"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ji* ]]; then
			if [[ "$value" =~ ^[0-9]+$ ]]; then
				cfgfile[DMR Network,Jitter]=$value
			else
				echo "'$value' is not a valid Jitter"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == db* ]]; then SetBool 'DMR Network,Debug' "$value"
		elif [[ "$key" == u*  ]]; then
			if   [[ "$value" == be* ]]; then ResetValue 'DMR,Beacons'
			elif [[ "$value" == bi* ]]; then ResetValue 'DMR,BeaconInterval'
			elif [[ "$value" == bd* ]]; then ResetValue 'DMR,BeaconDuration'
			elif [[ "$value" == cc* ]]; then ResetValue 'DMR,ColorCode'
			elif [[ "$value" == so* ]]; then ResetValue 'DMR,SelfOnly'
			elif [[ "$value" == lc* ]]; then ResetValue 'DMR,EmbeddedLCOnly'
			elif [[ "$value" == ta* ]]; then ResetValue 'DMR,DumpTAData'
			elif [[ "$value" == ch* ]]; then ResetValue 'DMR,CallHang'
			elif [[ "$value" == th* ]]; then ResetValue 'DMR,TXHang'
			elif [[ "$value" == ty* ]]; then ResetValue 'DMR Network,Type'
			elif [[ "$value" == cc* ]]; then ResetValue 'DMR Network,ColorCode'
			elif [[ "$value" == ad* ]]; then ResetValue 'DMR Network,Address'
			elif [[ "$value" == pw* ]]; then ResetValue 'DMR Network,Password'
			elif [[ "$value" == po* ]]; then ResetValue 'DMR Network,Port'
			elif [[ "$value" == lo* ]]; then ResetValue 'DMR Network,Local'
			elif [[ "$value" == s1* ]]; then ResetValue 'DMR Network,Slot1'
			elif [[ "$value" == s2* ]]; then ResetValue 'DMR Network,Slot2'
			elif [[ "$value" == ip* ]]; then ResetValue 'DMR Network,Address'
			elif [[ "$value" == ji* ]]; then ResetValue 'DMR Network,Jitter'
			elif [[ "$value" == db* ]]; then ResetValue 'DMR Network,Debug'
			fi
		fi
	done
}

MiscMenu() {
	key=''
	while [[ "$key" != q* ]]; do
		clear
		echo
		echo    "      Miscellanous Menu"
		echo
		echo -n " ll : Log Level (0-6)                              = "; EvalVar  'Log,LogLevel'
		echo -n " ce : CW ID Enable                                 = "; EvalBool 'CW Id,Enable'
		if [[ "${cfgfile[CW Id,Enable]}" == 1* ]]; then
			echo -n " ct : CW ID Time (sec)                             = "; EvalVar  'CW Id,Time'
			echo -n " cc : CW ID Callsign (blank uses General,Callsign) = "; EvalVar  'CW Id,Callsign'
		fi
		echo -n " lf : DMR ID Lookup Pathname                       = "; EvalVar  'DMR Id Lookup,File'
		echo -n " lt : DMR ID Lookup Reread Time (hrs)              = "; EvalVar  'DMR Id Lookup,Time'
		echo    "      Dashboard Sections:"
		echo    "          PS - Processes"
		echo    "          LH - Last Heard"
		echo    "          SY - System"
		echo    "          IP - Int. and Ext. IP Address"
		echo -n " do : Dashboard Show Order                         = "; EvalVar  'Dashboard,ShowOrder'
		echo -n " dr : Dashboard Refresh Time (sec)                 = "; EvalVar  'Dashboard,Refresh'
		echo -n " dl : Dashboard Last Heard Length                  = "; EvalVar  'Dashboard,LastHeardLength'
		EndMenu
		if   [[ "$key" == ll* ]]; then
			if [[ "$value" =~ ^[0123456]$ ]]; then
				cfgfile[Log,LogLevel]=$value
			else
				echo "'$value' is not a valid Log Level"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == ce* ]]; then SetBool 'CW Id,Enable' "$value"
		elif [[ "$key" == ct* ]]; then
			if [[ "$value" =~ ^(0|([1-9][0-9]*))$ ]]; then
				cfgfile[CW Id,Time]=$value
			else
				echo "'$value' is not a valid CW Id Time"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == cc* ]]; then
			if [[ "${value^^}" =~ ^[0-9]?[A-Z]{1,2}[0-9]{1,2}[A-Z]{1,4}$ ]]; then
				cfgfile[CW Id,Callsign]="${value^^}"
			else
				echo "'$value' is not a valid CW Id Callsign"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == lf* ]]; then
			if [[ "$value" =~ ^~?[-_%\./0-9a-zA-Z]+ ]]; then
				cfgfile[DMR Id Lookup,File]=$value
			else
				echo "'$value' is not a valid DMR Id Lookup File"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == lt* ]]; then
			if [[ "$value" =~ ^[1-9][0-9]*$ ]]; then
				cfgfile[DMR Id Lookup,Time]=$value
			else
				echo "'$value' is not a valid DMR Id Lookup Time"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == do* ]]; then
			if [[ "${value^^}" =~ ^(PS|LH|SY|IP)(,(PS|LH|SY|IP))*$ ]]; then
				cfgfile[Dashboard,ShowOrder]="${value^^}"
			else
				echo "'$value' is not a valid Dashboard Show Order"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == dr* ]]; then
			if [[ "${value^^}" =~ ^([5-9]|[1-5][0-9])$ ]]; then
				cfgfile[Dashboard,Refresh]=$value
			else
				echo "'$value' is not a valid Dashboard Refresh"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == dl* ]]; then
			if [[ "${value^^}" =~ ^[1-9][0-9]?$ ]]; then
				cfgfile[Dashboard,LastHeardLength]=$value
			else
				echo "'$value' is not a valid Dashboard Last Heard Length"
				read -p "<Enter> to continue: " garbage
			fi
		elif [[ "$key" == u*  ]]; then
			if   [[ "$value" == ll* ]]; then ResetValue 'Log,LogLevel'
			elif [[ "$value" == ce* ]]; then ResetValue 'CW Id,Enable'
			elif [[ "$value" == ct* ]]; then ResetValue 'CW Id,Time'
			elif [[ "$value" == cc* ]]; then ResetValue 'CW Id,Callsign'
			elif [[ "$value" == lf* ]]; then ResetValue 'DMR Id Lookup,File'
			elif [[ "$value" == lt* ]]; then ResetValue 'DMR Id Lookup,Time'
			elif [[ "$value" == do* ]]; then ResetValue 'Dashboard,ShowOrder'
			elif [[ "$value" == dr* ]]; then ResetValue 'Dashboard,Refresh'
			elif [[ "$value" == dl* ]]; then ResetValue 'Dashboard,LastHeardLength'
			fi
		fi
	done
}

WriteCFGFile() {
	local Options
	if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
		Options="StartRef=$StartRef;RelinkTime=$RelinkTime;UserLink=$UserLink;TS1_1=$TS1_1;TS1_2=$TS1_2;TS1_3=$TS1_3;TS1_4=$TS1_4;TS1_5=$TS1_5;TS1_6=$TS1_6;TS1_7=$TS1_7;TS1_8=$TS1_8;TS1_9=$TS1_9;TS2_1=$TS2_1;TS2_2=$TS2_2;TS2_3=$TS2_3;TS2_4=$TS2_4;TS2_5=$TS2_5;TS2_6=$TS2_6;TS2_7=$TS2_7;TS2_8=$TS2_8;TS2_9=$TS2_9;"
	else
		Options=''
	fi
cat << EOF > dmr.cfg
# Created on `date`
[General]
Callsign=${cfgfile[General,Callsign]}
Id=${cfgfile[General,Id]}
Timeout=${cfgfile[General,Timeout]}
Duplex=${cfgfile[General,Duplex]}

[Info]
RXFrequency=${cfgfile[Info,RXFrequency]}
TXFrequency=${cfgfile[Info,TXFrequency]}
Power=${cfgfile[Info,Power]}
Latitude=${cfgfile[Info,Latitude]}
Longitude=${cfgfile[Info,Longitude]}
Height=${cfgfile[Info,Height]}
Location=${cfgfile[Info,Location]}
Description=${cfgfile[Info,Description]}
URL=${cfgfile[Info,URL]}


[Log]
LogLevel=${cfgfile[Log,LogLevel]}

[DMR Id Lookup]
File=${cfgfile[DMR Id Lookup,File]}
Time=${cfgfile[DMR Id Lookup,Time]}

[Modem]
Port=${cfgfile[Modem,Port]}
Protocol=${cfgfile[Modem,Protocol]}
Address=${cfgfile[Modem,Address]}
TXInvert=${cfgfile[Modem,TXInvert]}
RXInvert=${cfgfile[Modem,RXInvert]}
PTTInvert=${cfgfile[Modem,PTTInvert]}
TXDelay=${cfgfile[Modem,TXDelay]}
DMRDelay=${cfgfile[Modem,DMRDelay]}
TXOffset=${cfgfile[Modem,TXOffset]}
RXOffset=${cfgfile[Modem,RXOffset]}
TXLevel=${cfgfile[Modem,TXLevel]}
RXLevel=${cfgfile[Modem,RXLevel]}
RFLevel=${cfgfile[Modem,RFLevel]}
CWIdTXLevel=${cfgfile[Modem,CWIdTXLevel]}
TXDCOffset=${cfgfile[Modem,TXDCOffset]}
RXDCOffset=${cfgfile[Modem,RXDCOffset]}
UseCOSAsLockout=${cfgfile[Modem,UseCOSAsLockout]}
Trace=${cfgfile[Modem,Trace]}
Debug=${cfgfile[Modem,Debug]}

[DMR]
Beacons=${cfgfile[DMR,Beacons]}
BeaconInterval=${cfgfile[DMR,BeaconInterval]}
BeaconDuration=${cfgfile[DMR,BeaconDuration]}
ColorCode=${cfgfile[DMR,ColorCode]}
SelfOnly=${cfgfile[DMR,SelfOnly]}
EmbeddedLCOnly=${cfgfile[DMR,EmbeddedLCOnly]}
DumpTAData=${cfgfile[DMR,DumpTAData]}
CallHang=${cfgfile[DMR,CallHang]}
TXHang=${cfgfile[DMR,TXHang]}

[DMR Network]
Type=${cfgfile[DMR Network,Type]}
Name=${cfgfile[DMR Network,Name]}
Address=${cfgfile[DMR Network,Address]}
Password=${cfgfile[DMR Network,Password]}
Port=${cfgfile[DMR Network,Port]}
Jitter=${cfgfile[DMR Network,Jitter]}
Options=$Options
Local=${cfgfile[DMR Network,Local]}
Slot1=${cfgfile[DMR Network,Slot1]}
Slot2=${cfgfile[DMR Network,Slot2]}
Debug=${cfgfile[DMR Network,Debug]}

[Dashboard]
Refresh=${cfgfile[Dashboard,Refresh]}
ShowOrder=${cfgfile[Dashboard,ShowOrder]}
LastHeardLength=${cfgfile[Dashboard,LastHeardLength]}
EOF
exit 0
}

ZeroStatic

ReadFile inifile dmr.ini

if [ ! -e dmr.cfg ]; then
	cp dmr.ini dmr.cfg
fi

ReadFile cfgfile dmr.cfg
eval "${cfgfile[DMR Network,Options]}"
if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
	SetStartRef $StartRef
fi

while [[ "$ans" != q* ]]
do
	txfreq=$( awk "BEGIN{print ${cfgfile[Info,TXFrequency]}/1000000}" )
	rxfreq=$( awk "BEGIN{print ${cfgfile[Info,RXFrequency]}/1000000}" )
	dup=( `EvalBool 'General,Duplex'` )
	clear
	echo
	echo "     DOH Configure V#220310"
	echo
	echo "     ID      ${cfgfile[General,Callsign]} - ${cfgfile[General,Id]}"
	echo "     TX(RX)  ${txfreq}(${rxfreq}) MHz"
	echo "     Duplex  ${dup[0]}"
	echo "     Network ${cfgfile[DMR Network,Name]}"
	if [ -e ${cfgfile[Modem,Port]} ]; then
		echo "     Modem @ ${cfgfile[Modem,Port]}"
	else
		echo "     WARNING: Modem at '${cfgfile[Modem,Port]}' not found. Is it unplugged?"
	fi
	if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
		echo
		echo "     DMR+ Options:"
		echo "         Start Reflector:      $StartRef - $StartRefName"
		echo "         Relink Time (min):    $RelinkTime"
		echo -n "         User can Relink:      "
		if (( 1 == UserLink )); then echo true; else echo false; fi
		if (( 4000 == StartRef )); then
			echo -n "         Slot 1 Static groups:"; EchoStatic one
			echo -n "         Slot 2 Static groups:"; EchoStatic two
		fi
	fi
	echo
	echo " g : General"
	echo " s : Station"
	echo " m : Modem"
	echo " n : DMR Network"
	if [[ "${cfgfile[DMR Network,Name]}" == DMR+_IPSC2* ]]; then
		echo " + : Configure DMR+ Options"
	fi
	echo " o : Other - DMR ID File, CW ID, Dashboard"
	echo
	echo " w : Write dmr.cfg file (overwrites exsisting file) and quit."
	echo " q : Quit without saving."
	echo
	read -p "Command: " ans
	if   [[ "$ans" == g* ]]; then GeneralMenu
	elif [[ "$ans" == s* ]]; then StationMenu
	elif [[ "$ans" == m* ]]; then ModemMenu
	elif [[ "$ans" == n* ]]; then NetworkMenu
	elif [[ "$ans" == o* ]]; then MiscMenu
	elif [[ "$ans" == +* ]]; then SetDMRPlusOptions
	elif [[ "$ans" == w* ]]; then WriteCFGFile
	fi
done
